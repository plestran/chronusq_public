#!@PYTHON_EXECUTABLE@
#
# The Chronus Quantum (ChronusQ) software package is high-performace 
# computational chemistry software with a strong emphasis on explicitly 
# time-dependent and post-SCF quantum mechanical methods.
# 
# Copyright (C) 2014-2015 Li Research Group (University of Washington)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Contact the Developers:
#   E-Mail: xsli@uw.edu
# 
#

import os,sys
import getopt
sys.path.append('@PYTHONAPI_PATH@')
import libpythonapi as chronusQ
from jobs.jobMap import *
from parse.parseInput import parseInput
from parse.parseMolecule import parseMolecule
from parse.parseQM import parseQM
from parse.parseMisc import parseMisc
import time 

class MetaData:
  def init(self):
#   SCF Info
    self.scfIters = 0 
    self.E      = 0 
    self.dipole     = []
    self.quadrupole = []
    self.octupole   = []
#   RESP Info
    self.excEne = []
    self.oscStr = []
    self.davIters = []
#   RT Info
    self.lastEnergy = 0
    self.lastDipole = []
    

def runCQ(ifname,ofname):
  authorfname = '@AUTHOR_PATH@'
  header = """
     ______ __                                      ____ 
    / ____// /_   _____ ____   ____   __  __ _____ / __ \ 
   / /    / __ \ / ___// __ \ / __ \ / / / // ___// / / /
  / /___ / / / // /   / /_/ // / / // /_/ /(__  )/ /_/ / 
  \____//_/ /_//_/    \____//_/ /_/ \__,_//____/ \___\_\ 
                                                         
  """
  banner = "-------------------------------------------------------------------------------\n"

  starttime= time.strftime("%c")
  
  
  mol        = chronusQ.Molecule()
  basisSet   = chronusQ.BasisSet()
  DFbasisSet = chronusQ.BasisSet()
  controls   = chronusQ.Controls()
  aoints     = chronusQ.AOIntegrals()
  
  hf_double     = chronusQ.SingleSlater_double()
  rt_double     = chronusQ.RealTime_double()
  sdr_double    = chronusQ.SDResponse_double()
  moints_double = chronusQ.MOIntegrals_double()
  
  hf_complex     = chronusQ.SingleSlater_complex()
  rt_complex     = chronusQ.RealTime_complex()
  sdr_complex    = chronusQ.SDResponse_complex()
  moints_complex = chronusQ.MOIntegrals_complex()
  
  out        = chronusQ.FileIO(ifname,ofname)
  
  workers = {
    "CQMolecule"          :mol,
    "CQBasisSet"          :basisSet,
    "CQDFBasisSet"        :DFbasisSet,
    "CQControls"          :controls,
    "CQAOIntegrals"       :aoints,
    "CQSingleSlaterDouble":hf_double,
    "CQRealTimeDouble"    :rt_double,
    "CQSDResponseDouble"  :sdr_double,
    "CQMOIntegralsDouble" :moints_double,
    "CQSingleSlaterComplex":hf_complex,
    "CQRealTimeComplex"    :rt_complex,
    "CQSDResponseComplex"  :sdr_complex,
    "CQMOIntegralsComplex" :moints_complex,
    "CQFileIO"            :out
  }
  
  
  if chronusQ.getRank() == 0:
    out.write("Job Started: %s"  % starttime )
    out.write(header)

    authors = open(authorfname, 'r')
    out.write("Author List:\n"+banner+authors.read())
    authors.close()
    
    inputf = open(ifname, 'r')
    out.write("Input File:\n"+banner+inputf.read()+banner)
    inputf.close()
  
  controls.iniControls()
  
  secDict = parseInput(workers,ifname)
  
  unittest = parseMisc(workers,secDict["MISC"])
  parseMolecule(workers,secDict["MOLECULE"])
  jobStr = parseQM(workers,secDict)
  
  if chronusQ.getRank() == 0:
    out.iniH5Files()
    out.iniStdGroups()
  
  chronusQ.mpiBarrier()
  jobMeta = MetaData()
  if chronusQ.getRank() == 0:
    jobMap[jobStr](workers,jobMeta)
  chronusQ.mpiBarrier()

  
  if chronusQ.getRank() == 0:
    endtime= time.strftime("%c")
    out.write("Job Completed: %s"  % endtime )

  return jobMeta


if __name__ in '__main__':

  chronusQ.initCQ(len(sys.argv),sys.argv)
  # Usage Message for incorrect input
  msg = """python chronusq.py -i <input file> [-o --option]
  
  Options:
    -h,--help     Print usage instructions
    -i,--input    Specify input file
    -o,--output   Specify input file
  
    --dump        Dump Unit Test Information"""


  # Get CLI options
  try:
    opts, args = getopt.getopt(
      sys.argv[1:],
      "hi:o:",
      ["help","input=","output=","dump="]
    )
  except getopt.GetoptError:
    if chronusQ.getRank() == 0:
      print msg
    sys.exit(2)

  # Null out filenames by default
  ifname = ''
  ofname = ''

  # No info dump at the end
  dumpSCF = False

  # Default that if only one parameter, is input file
  if len(opts) == 0 and len(args) == 1:
    ifname = args[0] 
  # Error if no arguments given
  elif len(opts) == 0 and len(args) == 0:
    if chronusQ.getRank() == 0:
      print msg
    sys.exit(2)

  # Loop over CLI options / arguements
  for opt, arg in opts:
    # Print Help message
    if opt in ('-h',"--help"):
      if chronusQ.getRank() == 0:
        print msg
      sys.exit()

    # Set input file
    if opt in ('-i',"--input"):
      ifname = arg

    # Set output file
    if opt in ('-o',"--output"):
      ofname = arg

    # Info dump
    if opt in ('--dump'):
      if arg in ('SCF'): dumpSCF = True
    

  # Run ChronusQ
  chronusQ.mpiBarrier()
  jobMeta = runCQ(ifname,ofname)
  chronusQ.mpiBarrier()


  if chronusQ.getRank() == 0:
    # Dump info (if set)
    auToD   = 0.3934303070
    auToAng = 0.5291772083
    auToAng2 = auToAng*auToAng 
    if dumpSCF:
      strX = ''
      strX = strX + "{0:.10f}/".format(jobMeta.E)
      strX = strX + "{0:.10f}/".format(jobMeta.dipole[0]/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.dipole[1]/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.dipole[2]/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[0][0]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[0][1]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[0][2]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[1][1]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[1][2]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.quadrupole[2][2]*auToAng/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][0][0]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][0][1]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][0][2]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][1][1]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][1][2]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[0][2][2]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[1][1][1]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[1][1][2]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[1][2][2]*auToAng2/auToD)
      strX = strX + "{0:.10f}/".format(jobMeta.octupole[2][2][2]*auToAng2/auToD)
 
      strX = strX + "SCF"
      print strX
  chronusQ.finalizeCQ()
