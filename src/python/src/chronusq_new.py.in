#!@PYTHON_EXECUTABLE@
#
# The Chronus Quantum (ChronusQ) software package is high-performace 
# computational chemistry software with a strong emphasis on explicitly 
# time-dependent and post-SCF quantum mechanical methods.
# 
# Copyright (C) 2014-2016 Li Research Group (University of Washington)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# 
# Contact the Developers:
#   E-Mail: xsli@uw.edu
# 
#

import os,sys
import getopt
sys.path.append('@PYTHONAPI_PATH@')
import libpythonapi as chronusQ
#from jobs.jobMap import *
from jobs.standardJobs import runCQJob
from parse.parseInput import parseInput
from parse.parseMolecule import parseMolecule
from parse.parseQM import parseQM, parseSCF
from parse.parseMisc import parseMisc
from parse.parseBasis import parseBasis
from parse.parseInts import parseInts
import time 

def runCQ(ifname,ofname):
  authorfname = '@AUTHOR_PATH@'
  header = """
     ______ __                                      ____ 
    / ____// /_   _____ ____   ____   __  __ _____ / __ \ 
   / /    / __ \ / ___// __ \ / __ \ / / / // ___// / / /
  / /___ / / / // /   / /_/ // / / // /_/ /(__  )/ /_/ / 
  \____//_/ /_//_/    \____//_/ /_/ \__,_//____/ \___\_\ 
                                                         
  """
  banner = "-------------------------------------------------------------------------------\n"

  starttime= time.strftime("%c")
  
  
  memManager = chronusQ.CQMemManager()
  out        = chronusQ.FileIO(ifname,ofname)

  workers = {"CQMemManager" : memManager, "CQFileIO" : out}

  # Print front matter for output file
  out.write("Job Started: %s"  % starttime )
  out.write(header)

  authors = open(authorfname, 'r')
  out.write("Contributors List:\n"+banner+authors.read())
  authors.close()
  
  inputf = open(ifname, 'r')
  out.write("Input File:\n"+banner+inputf.read()+banner)
  inputf.close()

  memManager.setTotalMem(int(256e6))

  # Parse Input file
  secDict = parseInput(workers,ifname)

  # Setup Options
  parseMolecule(workers,secDict['MOLECULE'])
  parseBasis(workers,secDict['BASIS'])
  job = parseQM(workers,secDict)

  # Parse Integral settings
  if 'INTS' in secDict:
    parseInts(workers,secDict['INTS'])
  else:
    workers["CQAOIntegrals"] = chronusQ.AOIntegrals()

  # Parse SCF Settings
  if 'SCF' in secDict:
    parseSCF(workers,secDict['SCF'])

  if 'MISC' in secDict:
    parseMisc(workers,secDict['MISC'])

  
  runCQJob(job,workers)






if __name__ in '__main__':

  chronusQ.initCQ(len(sys.argv),sys.argv)
  # Usage Message for incorrect input
  msg = """python chronusq.py -i <input file> [-o --option]
  
  Options:
    -h,--help     Print usage instructions
    -i,--input    Specify input file
    -o,--output   Specify input file
  
    --dump        Dump Unit Test Information"""


  # Get CLI options
  try:
    opts, args = getopt.getopt(
      sys.argv[1:],
      "hi:o:",
      ["help","input=","output="]
    )
  except getopt.GetoptError:
    if chronusQ.getRank() == 0:
      print msg
    sys.exit(2)

  # Null out filenames by default
  ifname = ''
  ofname = ''

  # Default that if only one parameter, is input file
  if len(opts) == 0 and len(args) == 1:
    ifname = args[0] 
  # Error if no arguments given
  elif len(opts) == 0 and len(args) == 0:
    if chronusQ.getRank() == 0:
      print msg
    sys.exit(2)

  # Loop over CLI options / arguements
  for opt, arg in opts:
    # Print Help message
    if opt in ('-h',"--help"):
      if chronusQ.getRank() == 0:
        print msg
      sys.exit()

    # Set input file
    if opt in ('-i',"--input"):
      ifname = arg

    # Set output file
    if opt in ('-o',"--output"):
      ofname = arg


  # Run ChronusQ
  jobMeta = runCQ(ifname,ofname)
  chronusQ.finalizeCQ()
